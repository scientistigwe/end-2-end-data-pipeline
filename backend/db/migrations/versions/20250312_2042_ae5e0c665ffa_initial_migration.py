"""initial_migration

Revision ID: ae5e0c665ffa
Revises: 
Create Date: 2025-03-12 20:42:10.088523+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ae5e0c665ffa'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', 'suspended', 'pending', name='user_status'), nullable=False),
    sa.Column('role', sa.Enum('admin', 'user', 'analyst', 'viewer', name='user_role'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_token', sa.String(length=255), nullable=True),
    sa.Column('verification_sent_at', sa.DateTime(), nullable=True),
    sa.Column('verification_token_expires_at', sa.DateTime(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=True),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.Column('phone_number', sa.String(length=50), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('locale', sa.String(length=10), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('mfa_enabled', sa.Boolean(), nullable=True),
    sa.Column('mfa_secret', sa.String(length=255), nullable=True),
    sa.Column('mfa_backup_codes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('mfa_type', sa.Enum('totp', 'sms', 'email', name='mfa_type'), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('failed_login_attempts >= 0', name='ck_valid_login_attempts'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('id', name=op.f('uq_users_id')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username')),
    sa.UniqueConstraint('verification_token', name=op.f('uq_users_verification_token'))
    )
    op.create_index('ix_users_active', 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index('ix_users_email_status', 'users', ['email', 'status'], unique=False)
    op.create_index('ix_users_role', 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_table('data_sources',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('file', 'db', 'api', 's3', 'stream', name='source_type'), nullable=False),
    sa.Column('status', sa.Enum('active', 'inactive', 'error', name='source_status'), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('refresh_interval', sa.Integer(), nullable=True),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('access_level', sa.Enum('public', 'private', 'shared', name='access_level'), nullable=True),
    sa.Column('encryption_enabled', sa.Boolean(), nullable=True),
    sa.Column('encryption_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('health_status', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('connection_retries', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('connection_retries >= 0', name='ck_connection_retries_valid'),
    sa.CheckConstraint('refresh_interval > 0', name='ck_refresh_interval_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_data_sources_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_data_sources_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_data_sources_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_data_sources_owner_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_data_sources_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_data_sources')),
    sa.UniqueConstraint('id', name=op.f('uq_data_sources_id'))
    )
    op.create_index(op.f('ix_data_sources_created_at'), 'data_sources', ['created_at'], unique=False)
    op.create_index(op.f('ix_data_sources_created_by'), 'data_sources', ['created_by'], unique=False)
    op.create_index('ix_data_sources_name_owner', 'data_sources', ['name', 'owner_id'], unique=True)
    op.create_index(op.f('ix_data_sources_owner_id'), 'data_sources', ['owner_id'], unique=False)
    op.create_index(op.f('ix_data_sources_tenant_id'), 'data_sources', ['tenant_id'], unique=False)
    op.create_index('ix_data_sources_type_status', 'data_sources', ['type', 'status'], unique=False)
    op.create_table('password_reset_tokens',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used', sa.Boolean(), nullable=True),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_ip', sa.String(length=45), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('expires_at > created_at', name='ck_token_expiry_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_password_reset_tokens_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_password_reset_tokens_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_password_reset_tokens_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_password_reset_tokens_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_password_reset_tokens_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_password_reset_tokens')),
    sa.UniqueConstraint('id', name=op.f('uq_password_reset_tokens_id')),
    sa.UniqueConstraint('token', name=op.f('uq_password_reset_tokens_token'))
    )
    op.create_index(op.f('ix_password_reset_tokens_created_at'), 'password_reset_tokens', ['created_at'], unique=False)
    op.create_index(op.f('ix_password_reset_tokens_created_by'), 'password_reset_tokens', ['created_by'], unique=False)
    op.create_index(op.f('ix_password_reset_tokens_tenant_id'), 'password_reset_tokens', ['tenant_id'], unique=False)
    op.create_index('ix_password_reset_tokens_user', 'password_reset_tokens', ['user_id'], unique=False)
    op.create_index(op.f('ix_password_reset_tokens_user_id'), 'password_reset_tokens', ['user_id'], unique=False)
    op.create_table('service_accounts',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('scope', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', 'expired', name='service_account_status'), nullable=False),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('api_key_hash', sa.String(length=255), nullable=True),
    sa.Column('restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('expires_at IS NULL OR expires_at > created_at', name='ck_valid_expiry'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_service_accounts_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_service_accounts_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_service_accounts_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_service_accounts_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_service_accounts_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_service_accounts')),
    sa.UniqueConstraint('id', name=op.f('uq_service_accounts_id'))
    )
    op.create_index(op.f('ix_service_accounts_created_at'), 'service_accounts', ['created_at'], unique=False)
    op.create_index(op.f('ix_service_accounts_created_by'), 'service_accounts', ['created_by'], unique=False)
    op.create_index('ix_service_accounts_name', 'service_accounts', ['name'], unique=False)
    op.create_index('ix_service_accounts_status', 'service_accounts', ['status'], unique=False)
    op.create_index(op.f('ix_service_accounts_tenant_id'), 'service_accounts', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_service_accounts_user_id'), 'service_accounts', ['user_id'], unique=False)
    op.create_table('session_devices',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_id', sa.String(length=255), nullable=False),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('device_name', sa.String(length=255), nullable=True),
    sa.Column('os_type', sa.String(length=50), nullable=True),
    sa.Column('os_version', sa.String(length=50), nullable=True),
    sa.Column('browser_type', sa.String(length=50), nullable=True),
    sa.Column('browser_version', sa.String(length=50), nullable=True),
    sa.Column('is_trusted', sa.Boolean(), nullable=True),
    sa.Column('trust_expires_at', sa.DateTime(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('last_ip', sa.String(length=45), nullable=True),
    sa.Column('risk_score', sa.Integer(), nullable=True),
    sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('security_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('risk_score >= 0 AND risk_score <= 100', name='ck_risk_score_range'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_session_devices_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_session_devices_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_session_devices_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_session_devices_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_session_devices_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_session_devices')),
    sa.UniqueConstraint('id', name=op.f('uq_session_devices_id'))
    )
    op.create_index(op.f('ix_session_devices_created_at'), 'session_devices', ['created_at'], unique=False)
    op.create_index(op.f('ix_session_devices_created_by'), 'session_devices', ['created_by'], unique=False)
    op.create_index(op.f('ix_session_devices_tenant_id'), 'session_devices', ['tenant_id'], unique=False)
    op.create_index('ix_session_devices_user_device', 'session_devices', ['user_id', 'device_id'], unique=True)
    op.create_table('tags',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_tags_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_tags_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_tags_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_tags_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tags')),
    sa.UniqueConstraint('id', name=op.f('uq_tags_id')),
    sa.UniqueConstraint('name', name=op.f('uq_tags_name'))
    )
    op.create_index('ix_tags_category', 'tags', ['category'], unique=False)
    op.create_index(op.f('ix_tags_created_at'), 'tags', ['created_at'], unique=False)
    op.create_index(op.f('ix_tags_created_by'), 'tags', ['created_by'], unique=False)
    op.create_index('ix_tags_name', 'tags', ['name'], unique=False)
    op.create_index(op.f('ix_tags_tenant_id'), 'tags', ['tenant_id'], unique=False)
    op.create_table('teams',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('type', sa.Enum('department', 'project', 'workgroup', name='team_type'), nullable=True),
    sa.Column('visibility', sa.Enum('public', 'private', 'restricted', name='team_visibility'), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('member_limit', sa.Integer(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', 'archived', name='team_status'), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('archived_reason', sa.String(length=255), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('member_limit IS NULL OR member_limit > 0', name='ck_member_limit_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_teams_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_teams_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_teams_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_teams_owner_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_teams_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_teams')),
    sa.UniqueConstraint('id', name=op.f('uq_teams_id'))
    )
    op.create_index(op.f('ix_teams_created_at'), 'teams', ['created_at'], unique=False)
    op.create_index(op.f('ix_teams_created_by'), 'teams', ['created_by'], unique=False)
    op.create_index('ix_teams_name', 'teams', ['name'], unique=False)
    op.create_index('ix_teams_owner', 'teams', ['owner_id'], unique=False)
    op.create_index('ix_teams_status', 'teams', ['status'], unique=False)
    op.create_index(op.f('ix_teams_tenant_id'), 'teams', ['tenant_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=True),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('revocation_reason', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('device_id', sa.String(length=255), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('security_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('mfa_verified', sa.Boolean(), nullable=True),
    sa.Column('mfa_verified_at', sa.DateTime(), nullable=True),
    sa.Column('mfa_method_used', sa.String(length=50), nullable=True),
    sa.Column('last_active', sa.DateTime(), nullable=True),
    sa.Column('last_ip', sa.String(length=45), nullable=True),
    sa.Column('activity_count', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('activity_count >= 0', name='ck_activity_count_valid'),
    sa.CheckConstraint('expires_at > created_at', name='ck_session_expiry_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_user_sessions_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_user_sessions_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_user_sessions_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_user_sessions_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_sessions_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_sessions')),
    sa.UniqueConstraint('id', name=op.f('uq_user_sessions_id')),
    sa.UniqueConstraint('refresh_token', name=op.f('uq_user_sessions_refresh_token')),
    sa.UniqueConstraint('token', name=op.f('uq_user_sessions_token'))
    )
    op.create_index(op.f('ix_user_sessions_created_at'), 'user_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_created_by'), 'user_sessions', ['created_by'], unique=False)
    op.create_index('ix_user_sessions_device', 'user_sessions', ['device_id'], unique=False)
    op.create_index('ix_user_sessions_expires', 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_tenant_id'), 'user_sessions', ['tenant_id'], unique=False)
    op.create_index('ix_user_sessions_token', 'user_sessions', ['token'], unique=False)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('api_source_configs',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('auth_type', sa.String(length=50), nullable=True),
    sa.Column('auth_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=True),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('retry_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('webhook_url', sa.String(length=255), nullable=True),
    sa.Column('webhook_secret', sa.String(length=255), nullable=True),
    sa.Column('pagination_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('response_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('transformation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('rate_limit > 0', name='ck_rate_limit_positive'),
    sa.CheckConstraint('timeout > 0', name='ck_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_api_source_configs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_api_source_configs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_api_source_configs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_api_source_configs_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_api_source_configs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('source_id', 'id', name=op.f('pk_api_source_configs')),
    sa.UniqueConstraint('id', name=op.f('uq_api_source_configs_id'))
    )
    op.create_index(op.f('ix_api_source_configs_created_at'), 'api_source_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_api_source_configs_created_by'), 'api_source_configs', ['created_by'], unique=False)
    op.create_index(op.f('ix_api_source_configs_tenant_id'), 'api_source_configs', ['tenant_id'], unique=False)
    op.create_table('database_source_configs',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('dialect', sa.String(length=50), nullable=True),
    sa.Column('schema', sa.String(length=100), nullable=True),
    sa.Column('ssl_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pool_size', sa.Integer(), nullable=True),
    sa.Column('max_overflow', sa.Integer(), nullable=True),
    sa.Column('pool_timeout', sa.Integer(), nullable=True),
    sa.Column('pool_recycle', sa.Integer(), nullable=True),
    sa.Column('connection_timeout', sa.Integer(), nullable=True),
    sa.Column('query_timeout', sa.Integer(), nullable=True),
    sa.Column('execution_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('replication_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('migration_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('backup_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('connection_timeout > 0', name='ck_connection_timeout_positive'),
    sa.CheckConstraint('max_overflow >= 0', name='ck_max_overflow_valid'),
    sa.CheckConstraint('pool_size > 0', name='ck_pool_size_positive'),
    sa.CheckConstraint('pool_timeout > 0', name='ck_pool_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_database_source_configs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_database_source_configs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_database_source_configs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_database_source_configs_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_database_source_configs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('source_id', 'id', name=op.f('pk_database_source_configs')),
    sa.UniqueConstraint('id', name=op.f('uq_database_source_configs_id'))
    )
    op.create_index(op.f('ix_database_source_configs_created_at'), 'database_source_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_database_source_configs_created_by'), 'database_source_configs', ['created_by'], unique=False)
    op.create_index(op.f('ix_database_source_configs_tenant_id'), 'database_source_configs', ['tenant_id'], unique=False)
    op.create_table('file_source_info',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('file_type', sa.String(length=50), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('hash', sa.String(length=64), nullable=True),
    sa.Column('encoding', sa.String(length=50), nullable=True),
    sa.Column('delimiter', sa.String(length=10), nullable=True),
    sa.Column('compression', sa.String(length=50), nullable=True),
    sa.Column('schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('column_mappings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('transformation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('size >= 0', name='ck_size_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_file_source_info_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_file_source_info_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_file_source_info_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_file_source_info_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_file_source_info_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('source_id', 'id', name=op.f('pk_file_source_info')),
    sa.UniqueConstraint('id', name=op.f('uq_file_source_info_id'))
    )
    op.create_index(op.f('ix_file_source_info_created_at'), 'file_source_info', ['created_at'], unique=False)
    op.create_index(op.f('ix_file_source_info_created_by'), 'file_source_info', ['created_by'], unique=False)
    op.create_index(op.f('ix_file_source_info_tenant_id'), 'file_source_info', ['tenant_id'], unique=False)
    op.create_table('pipeline_templates',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('complexity_level', sa.Enum('basic', 'intermediate', 'advanced', name='template_complexity'), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('required_resources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('public', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('average_success_rate', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('average_success_rate >= 0 AND average_success_rate <= 100', name='ck_success_rate_range'),
    sa.CheckConstraint('estimated_duration > 0', name='ck_duration_positive'),
    sa.CheckConstraint('usage_count >= 0', name='ck_usage_count_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_templates_created_by')),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_templates_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_templates_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name=op.f('fk_pipeline_templates_team_id')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_templates_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_templates')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_templates_id')),
    sa.UniqueConstraint('name', name='uq_template_name')
    )
    op.create_index(op.f('ix_pipeline_templates_created_at'), 'pipeline_templates', ['created_at'], unique=False)
    op.create_index('ix_pipeline_templates_name', 'pipeline_templates', ['name'], unique=False)
    op.create_index(op.f('ix_pipeline_templates_tenant_id'), 'pipeline_templates', ['tenant_id'], unique=False)
    op.create_table('pipelines',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('idle', 'running', 'paused', 'completed', 'failed', 'cancelled', name='pipeline_status'), nullable=True),
    sa.Column('mode', sa.Enum('development', 'staging', 'production', name='pipeline_mode'), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('progress', sa.Float(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=True),
    sa.Column('retry_limit', sa.Integer(), nullable=True),
    sa.Column('retry_delay', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('concurrent_runs', sa.Boolean(), nullable=True),
    sa.Column('last_run', sa.DateTime(), nullable=True),
    sa.Column('next_run', sa.DateTime(), nullable=True),
    sa.Column('total_runs', sa.Integer(), nullable=True),
    sa.Column('successful_runs', sa.Integer(), nullable=True),
    sa.Column('average_duration', sa.Float(), nullable=True),
    sa.Column('last_success', sa.DateTime(), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('schedule_enabled', sa.Boolean(), nullable=True),
    sa.Column('schedule_cron', sa.String(length=100), nullable=True),
    sa.Column('schedule_timezone', sa.String(length=50), nullable=True),
    sa.Column('schedule_start', sa.DateTime(), nullable=True),
    sa.Column('schedule_end', sa.DateTime(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('pipeline_source_id', sa.UUID(), nullable=True),
    sa.Column('pipeline_target_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('progress >= 0 AND progress <= 100', name='ck_progress_range'),
    sa.CheckConstraint('retry_delay >= 0', name='ck_retry_delay_positive'),
    sa.CheckConstraint('retry_limit >= 0', name='ck_retry_limit_positive'),
    sa.CheckConstraint('timeout > 0', name='ck_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipelines_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipelines_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipelines_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_pipelines_owner_id')),
    sa.ForeignKeyConstraint(['pipeline_source_id'], ['data_sources.id'], name=op.f('fk_pipelines_pipeline_source_id')),
    sa.ForeignKeyConstraint(['pipeline_target_id'], ['data_sources.id'], name=op.f('fk_pipelines_pipeline_target_id')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipelines_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipelines')),
    sa.UniqueConstraint('id', name=op.f('uq_pipelines_id')),
    sa.UniqueConstraint('name', 'owner_id', name='uq_pipeline_name_owner')
    )
    op.create_index(op.f('ix_pipelines_created_at'), 'pipelines', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipelines_created_by'), 'pipelines', ['created_by'], unique=False)
    op.create_index('ix_pipelines_mode', 'pipelines', ['mode'], unique=False)
    op.create_index('ix_pipelines_owner', 'pipelines', ['owner_id'], unique=False)
    op.create_index('ix_pipelines_status', 'pipelines', ['status'], unique=False)
    op.create_index(op.f('ix_pipelines_tenant_id'), 'pipelines', ['tenant_id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('use_count', sa.Integer(), nullable=True),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('issued_by_session_id', sa.UUID(), nullable=True),
    sa.Column('issued_ip', sa.String(length=45), nullable=True),
    sa.Column('device_id', sa.String(length=255), nullable=True),
    sa.Column('revoked', sa.Boolean(), nullable=True),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('revocation_reason', sa.String(length=255), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('expires_at > created_at', name='ck_token_expiry_valid'),
    sa.CheckConstraint('max_uses >= 0', name='ck_max_uses_valid'),
    sa.CheckConstraint('use_count >= 0', name='ck_use_count_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_refresh_tokens_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_refresh_tokens_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['issued_by_session_id'], ['user_sessions.id'], name=op.f('fk_refresh_tokens_issued_by_session_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_refresh_tokens_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_refresh_tokens_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_refresh_tokens_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_refresh_tokens')),
    sa.UniqueConstraint('id', name=op.f('uq_refresh_tokens_id')),
    sa.UniqueConstraint('token_hash', name=op.f('uq_refresh_tokens_token_hash'))
    )
    op.create_index(op.f('ix_refresh_tokens_created_at'), 'refresh_tokens', ['created_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_created_by'), 'refresh_tokens', ['created_by'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_tenant_id'), 'refresh_tokens', ['tenant_id'], unique=False)
    op.create_index('ix_refresh_tokens_user', 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('s3_source_configs',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('bucket', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(length=50), nullable=True),
    sa.Column('prefix', sa.String(length=255), nullable=True),
    sa.Column('encryption_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('storage_class', sa.String(length=50), nullable=True),
    sa.Column('versioning_enabled', sa.Boolean(), nullable=True),
    sa.Column('transfer_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('multipart_threshold', sa.Integer(), nullable=True),
    sa.Column('max_concurrency', sa.Integer(), nullable=True),
    sa.Column('multipart_chunksize', sa.Integer(), nullable=True),
    sa.Column('lifecycle_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('replication_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('max_concurrency > 0', name='ck_max_concurrency_positive'),
    sa.CheckConstraint('multipart_chunksize > 0', name='ck_multipart_chunksize_positive'),
    sa.CheckConstraint('multipart_threshold > 0', name='ck_multipart_threshold_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_s3_source_configs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_s3_source_configs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_s3_source_configs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_s3_source_configs_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_s3_source_configs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('source_id', 'id', name=op.f('pk_s3_source_configs')),
    sa.UniqueConstraint('id', name=op.f('uq_s3_source_configs_id'))
    )
    op.create_index(op.f('ix_s3_source_configs_created_at'), 's3_source_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_s3_source_configs_created_by'), 's3_source_configs', ['created_by'], unique=False)
    op.create_index(op.f('ix_s3_source_configs_tenant_id'), 's3_source_configs', ['tenant_id'], unique=False)
    op.create_table('source_connections',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('connected', 'disconnected', 'error', name='connection_status'), nullable=True),
    sa.Column('connection_id', sa.String(length=255), nullable=True),
    sa.Column('connected_at', sa.DateTime(), nullable=True),
    sa.Column('disconnected_at', sa.DateTime(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('latency', sa.Float(), nullable=True),
    sa.Column('throughput', sa.Float(), nullable=True),
    sa.Column('error_rate', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('error_rate >= 0 AND error_rate <= 1', name='ck_error_rate_range'),
    sa.CheckConstraint('latency >= 0', name='ck_latency_non_negative'),
    sa.CheckConstraint('throughput >= 0', name='ck_throughput_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_source_connections_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_source_connections_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_source_connections_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_source_connections_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_source_connections_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_source_connections')),
    sa.UniqueConstraint('id', name=op.f('uq_source_connections_id'))
    )
    op.create_index(op.f('ix_source_connections_created_at'), 'source_connections', ['created_at'], unique=False)
    op.create_index(op.f('ix_source_connections_created_by'), 'source_connections', ['created_by'], unique=False)
    op.create_index('ix_source_connections_status', 'source_connections', ['status'], unique=False)
    op.create_index(op.f('ix_source_connections_tenant_id'), 'source_connections', ['tenant_id'], unique=False)
    op.create_table('source_sync_history',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('success', 'partial', 'failed', name='sync_status'), nullable=False),
    sa.Column('records_processed', sa.Integer(), nullable=True),
    sa.Column('bytes_processed', sa.Integer(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('sync_meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('average_speed', sa.Float(), nullable=True),
    sa.Column('resource_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('average_speed >= 0', name='ck_average_speed_non_negative'),
    sa.CheckConstraint('bytes_processed >= 0', name='ck_bytes_processed_non_negative'),
    sa.CheckConstraint('duration >= 0', name='ck_duration_non_negative'),
    sa.CheckConstraint('records_processed >= 0', name='ck_records_processed_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_source_sync_history_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_source_sync_history_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_source_sync_history_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_source_sync_history_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_source_sync_history_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_source_sync_history')),
    sa.UniqueConstraint('id', name=op.f('uq_source_sync_history_id'))
    )
    op.create_index(op.f('ix_source_sync_history_created_at'), 'source_sync_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_source_sync_history_created_by'), 'source_sync_history', ['created_by'], unique=False)
    op.create_index('ix_source_sync_history_source_time', 'source_sync_history', ['source_id', 'start_time'], unique=False)
    op.create_index(op.f('ix_source_sync_history_tenant_id'), 'source_sync_history', ['tenant_id'], unique=False)
    op.create_table('stream_source_configs',
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.Column('stream_type', sa.String(length=50), nullable=True),
    sa.Column('partitions', sa.Integer(), nullable=True),
    sa.Column('batch_size', sa.Integer(), nullable=True),
    sa.Column('processing_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_handling', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('checkpoint_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scaling_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('throughput_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('latency_targets', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('schema_registry_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('compression_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('monitoring_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('batch_size > 0', name='ck_batch_size_positive'),
    sa.CheckConstraint('partitions > 0', name='ck_partitions_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_stream_source_configs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_stream_source_configs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_stream_source_configs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_stream_source_configs_source_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_stream_source_configs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('source_id', 'id', name=op.f('pk_stream_source_configs')),
    sa.UniqueConstraint('id', name=op.f('uq_stream_source_configs_id'))
    )
    op.create_index(op.f('ix_stream_source_configs_created_at'), 'stream_source_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_stream_source_configs_created_by'), 'stream_source_configs', ['created_by'], unique=False)
    op.create_index(op.f('ix_stream_source_configs_tenant_id'), 'stream_source_configs', ['tenant_id'], unique=False)
    op.create_table('team_invitations',
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('admin', 'editor', 'viewer', name='invitation_role'), nullable=True),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'accepted', 'rejected', 'expired', name='invitation_status'), nullable=True),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('accepted_by_user_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('expires_at > created_at', name='ck_invitation_expiry_valid'),
    sa.ForeignKeyConstraint(['accepted_by_user_id'], ['users.id'], name=op.f('fk_team_invitations_accepted_by_user_id')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_team_invitations_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_team_invitations_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_team_invitations_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name=op.f('fk_team_invitations_team_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_team_invitations_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_invitations')),
    sa.UniqueConstraint('id', name=op.f('uq_team_invitations_id')),
    sa.UniqueConstraint('token', name=op.f('uq_team_invitations_token'))
    )
    op.create_index(op.f('ix_team_invitations_created_at'), 'team_invitations', ['created_at'], unique=False)
    op.create_index(op.f('ix_team_invitations_created_by'), 'team_invitations', ['created_by'], unique=False)
    op.create_index('ix_team_invitations_email', 'team_invitations', ['email'], unique=False)
    op.create_index('ix_team_invitations_status', 'team_invitations', ['status'], unique=False)
    op.create_index(op.f('ix_team_invitations_tenant_id'), 'team_invitations', ['tenant_id'], unique=False)
    op.create_table('team_members',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'editor', 'viewer', name='team_member_role'), nullable=False),
    sa.Column('custom_permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', 'pending', name='team_member_status'), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=False),
    sa.Column('invited_by', sa.UUID(), nullable=True),
    sa.Column('invitation_message', sa.Text(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('last_active', sa.DateTime(), nullable=True),
    sa.Column('contribution_count', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('contribution_count >= 0', name='ck_contribution_count_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_team_members_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_team_members_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], name=op.f('fk_team_members_invited_by')),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_team_members_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name=op.f('fk_team_members_team_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_team_members_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_team_members_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_members')),
    sa.UniqueConstraint('id', name=op.f('uq_team_members_id')),
    sa.UniqueConstraint('user_id', 'team_id', name='uq_user_team')
    )
    op.create_index(op.f('ix_team_members_created_at'), 'team_members', ['created_at'], unique=False)
    op.create_index(op.f('ix_team_members_created_by'), 'team_members', ['created_by'], unique=False)
    op.create_index('ix_team_members_role', 'team_members', ['role'], unique=False)
    op.create_index('ix_team_members_status', 'team_members', ['status'], unique=False)
    op.create_index(op.f('ix_team_members_team_id'), 'team_members', ['team_id'], unique=False)
    op.create_index(op.f('ix_team_members_tenant_id'), 'team_members', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_team_members_user_id'), 'team_members', ['user_id'], unique=False)
    op.create_table('team_resources',
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('visibility', sa.Enum('public', 'team', 'restricted', name='resource_visibility'), nullable=True),
    sa.Column('access_permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('active', 'archived', 'pending', name='resource_status'), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('access_count >= 0', name='ck_access_count_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_team_resources_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_team_resources_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_team_resources_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name=op.f('fk_team_resources_team_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_team_resources_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_team_resources')),
    sa.UniqueConstraint('id', name=op.f('uq_team_resources_id'))
    )
    op.create_index(op.f('ix_team_resources_created_at'), 'team_resources', ['created_at'], unique=False)
    op.create_index(op.f('ix_team_resources_created_by'), 'team_resources', ['created_by'], unique=False)
    op.create_index('ix_team_resources_status', 'team_resources', ['status'], unique=False)
    op.create_index('ix_team_resources_team', 'team_resources', ['team_id'], unique=False)
    op.create_index(op.f('ix_team_resources_tenant_id'), 'team_resources', ['tenant_id'], unique=False)
    op.create_index('ix_team_resources_type', 'team_resources', ['type'], unique=False)
    op.create_table('user_activity_logs',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('activity_type', sa.String(length=100), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_user_activity_logs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_user_activity_logs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_user_activity_logs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id'], ['user_sessions.id'], name=op.f('fk_user_activity_logs_session_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_user_activity_logs_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_activity_logs_user_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_activity_logs')),
    sa.UniqueConstraint('id', name=op.f('uq_user_activity_logs_id'))
    )
    op.create_index(op.f('ix_user_activity_logs_created_at'), 'user_activity_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_created_by'), 'user_activity_logs', ['created_by'], unique=False)
    op.create_index('ix_user_activity_logs_entity', 'user_activity_logs', ['entity_type', 'entity_id'], unique=False)
    op.create_index('ix_user_activity_logs_success', 'user_activity_logs', ['success'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_tenant_id'), 'user_activity_logs', ['tenant_id'], unique=False)
    op.create_index('ix_user_activity_logs_type', 'user_activity_logs', ['activity_type'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_user_id'), 'user_activity_logs', ['user_id'], unique=False)
    op.create_table('pipeline_runs',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('running', 'completed', 'failed', 'cancelled', name='run_status'), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('error', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('triggered_by', sa.UUID(), nullable=True),
    sa.Column('trigger_type', sa.String(length=50), nullable=True),
    sa.Column('environment_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('inputs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('outputs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('logs_url', sa.String(length=255), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('duration >= 0', name='ck_run_duration_positive'),
    sa.CheckConstraint('end_time IS NULL OR end_time >= start_time', name='ck_run_time_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_runs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_runs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_runs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_runs_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['triggered_by'], ['users.id'], name=op.f('fk_pipeline_runs_triggered_by')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_runs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_runs')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_runs_id'))
    )
    op.create_index(op.f('ix_pipeline_runs_created_at'), 'pipeline_runs', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_runs_created_by'), 'pipeline_runs', ['created_by'], unique=False)
    op.create_index('ix_pipeline_runs_pipeline', 'pipeline_runs', ['pipeline_id'], unique=False)
    op.create_index('ix_pipeline_runs_status', 'pipeline_runs', ['status'], unique=False)
    op.create_index(op.f('ix_pipeline_runs_tenant_id'), 'pipeline_runs', ['tenant_id'], unique=False)
    op.create_table('pipeline_schedules',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('cron_expression', sa.String(length=100), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('last_execution', sa.DateTime(), nullable=True),
    sa.Column('next_execution', sa.DateTime(), nullable=True),
    sa.Column('execution_count', sa.Integer(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=True),
    sa.Column('max_concurrent', sa.Integer(), nullable=True),
    sa.Column('retry_on_failure', sa.Boolean(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('retry_delay', sa.Integer(), nullable=True),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('end_date IS NULL OR end_date > start_date', name='ck_schedule_dates_valid'),
    sa.CheckConstraint('execution_count >= 0', name='ck_execution_count_non_negative'),
    sa.CheckConstraint('max_concurrent > 0', name='ck_max_concurrent_positive'),
    sa.CheckConstraint('timeout > 0', name='ck_schedule_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_schedules_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_schedules_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_schedules_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_schedules_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_schedules_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_schedules')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_schedules_id'))
    )
    op.create_index(op.f('ix_pipeline_schedules_created_at'), 'pipeline_schedules', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_schedules_created_by'), 'pipeline_schedules', ['created_by'], unique=False)
    op.create_index('ix_pipeline_schedules_next_execution', 'pipeline_schedules', ['next_execution'], unique=False)
    op.create_index('ix_pipeline_schedules_pipeline', 'pipeline_schedules', ['pipeline_id'], unique=False)
    op.create_index(op.f('ix_pipeline_schedules_tenant_id'), 'pipeline_schedules', ['tenant_id'], unique=False)
    op.create_table('pipeline_steps',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=100), nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pipeline_step_order', sa.Integer(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=True),
    sa.Column('retry_attempts', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('artifacts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('environment', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timeout_policy', sa.Enum('fail', 'skip', 'retry', name='timeout_policy'), nullable=True),
    sa.Column('error_policy', sa.Enum('fail', 'skip', 'retry', name='error_policy'), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('max_retries >= 0', name='ck_max_retries_valid'),
    sa.CheckConstraint('pipeline_step_order >= 0', name='ck_step_order_positive'),
    sa.CheckConstraint('retry_attempts >= 0', name='ck_retry_attempts_valid'),
    sa.CheckConstraint('timeout > 0', name='ck_step_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_steps_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_steps_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_steps_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_steps_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_steps_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_steps')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_steps_id'))
    )
    op.create_index(op.f('ix_pipeline_steps_created_at'), 'pipeline_steps', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_steps_created_by'), 'pipeline_steps', ['created_by'], unique=False)
    op.create_index('ix_pipeline_steps_order', 'pipeline_steps', ['pipeline_id', 'pipeline_step_order'], unique=False)
    op.create_index('ix_pipeline_steps_pipeline', 'pipeline_steps', ['pipeline_id'], unique=False)
    op.create_index(op.f('ix_pipeline_steps_tenant_id'), 'pipeline_steps', ['tenant_id'], unique=False)
    op.create_table('pipeline_tags',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_tags_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_pipeline_tags_tag_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pipeline_id', 'tag_id', name=op.f('pk_pipeline_tags'))
    )
    op.create_index('ix_pipeline_tags_pipeline', 'pipeline_tags', ['pipeline_id'], unique=False)
    op.create_index('ix_pipeline_tags_tag', 'pipeline_tags', ['tag_id'], unique=False)
    op.create_table('pipeline_versions',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_hash', sa.String(length=64), nullable=True),
    sa.Column('snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('change_summary', sa.Text(), nullable=True),
    sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_deployable', sa.Boolean(), nullable=True),
    sa.Column('deployment_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('average_runtime', sa.Float(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('average_runtime >= 0', name='ck_avg_runtime_non_negative'),
    sa.CheckConstraint('success_rate >= 0 AND success_rate <= 100', name='ck_success_rate_range'),
    sa.CheckConstraint('version_number > 0', name='ck_version_number_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_versions_created_by')),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_versions_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_versions_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_versions_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_versions_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_versions')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_versions_id')),
    sa.UniqueConstraint('pipeline_id', 'version_number', name='uq_pipeline_version_number')
    )
    op.create_index(op.f('ix_pipeline_versions_created_at'), 'pipeline_versions', ['created_at'], unique=False)
    op.create_index('ix_pipeline_versions_pipeline', 'pipeline_versions', ['pipeline_id'], unique=False)
    op.create_index(op.f('ix_pipeline_versions_tenant_id'), 'pipeline_versions', ['tenant_id'], unique=False)
    op.create_table('quality_gates',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('severity', sa.Enum('low', 'medium', 'high', 'critical', name='gate_severity'), nullable=True),
    sa.Column('action', sa.Enum('warn', 'block', 'notify', name='gate_action'), nullable=True),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('threshold >= 0 AND threshold <= 1', name='ck_threshold_range'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_quality_gates_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_quality_gates_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_quality_gates_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_quality_gates_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_quality_gates_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_quality_gates')),
    sa.UniqueConstraint('id', name=op.f('uq_quality_gates_id'))
    )
    op.create_index(op.f('ix_quality_gates_created_at'), 'quality_gates', ['created_at'], unique=False)
    op.create_index(op.f('ix_quality_gates_created_by'), 'quality_gates', ['created_by'], unique=False)
    op.create_index('ix_quality_gates_pipeline', 'quality_gates', ['pipeline_id'], unique=False)
    op.create_index(op.f('ix_quality_gates_tenant_id'), 'quality_gates', ['tenant_id'], unique=False)
    op.create_table('staged_outputs',
    sa.Column('stage_key', sa.String(), nullable=False),
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('component_type', sa.Enum('ANALYTICS', 'DECISION', 'INSIGHT', 'MONITORING', 'QUALITY', 'RECOMMENDATION', 'REPORT', 'CONTROL', 'METRICS', 'COMPLIANCE', name='componenttype'), nullable=True),
    sa.Column('stage', sa.Enum('INGESTION', 'VALIDATION', 'TRANSFORMATION', 'PROCESSING', 'COMPLETION', name='processingstage'), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'PAUSED', 'CANCELLED', name='processingstatus'), nullable=False),
    sa.Column('storage_path', sa.String(length=255), nullable=True),
    sa.Column('data_size', sa.Integer(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_temporary', sa.Boolean(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_processed_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('completed_at IS NULL OR completed_at >= started_at', name='ck_completion_time_valid'),
    sa.CheckConstraint('data_size >= 0', name='ck_data_size_non_negative'),
    sa.CheckConstraint('error_count >= 0', name='ck_error_count_non_negative'),
    sa.CheckConstraint('processing_time >= 0 OR processing_time IS NULL', name='ck_processing_time_valid'),
    sa.CheckConstraint('retry_count >= 0', name='ck_retry_count_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_staged_outputs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_staged_outputs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_staged_outputs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_staged_outputs_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_outputs_source_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_staged_outputs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_staged_outputs')),
    sa.UniqueConstraint('id', name=op.f('uq_staged_outputs_id'))
    )
    op.create_index('ix_staged_outputs_component', 'staged_outputs', ['component_type'], unique=False)
    op.create_index(op.f('ix_staged_outputs_created_at'), 'staged_outputs', ['created_at'], unique=False)
    op.create_index(op.f('ix_staged_outputs_created_by'), 'staged_outputs', ['created_by'], unique=False)
    op.create_index('ix_staged_outputs_pipeline_id', 'staged_outputs', ['pipeline_id'], unique=False)
    op.create_index('ix_staged_outputs_source_id', 'staged_outputs', ['source_id'], unique=False)
    op.create_index('ix_staged_outputs_stage', 'staged_outputs', ['stage'], unique=False)
    op.create_index('ix_staged_outputs_status', 'staged_outputs', ['status'], unique=False)
    op.create_index(op.f('ix_staged_outputs_tenant_id'), 'staged_outputs', ['tenant_id'], unique=False)
    op.create_table('pipeline_dependencies',
    sa.Column('dependent_version_id', sa.UUID(), nullable=False),
    sa.Column('dependency_version_id', sa.UUID(), nullable=False),
    sa.Column('dependency_type', sa.Enum('required', 'optional', 'conditional', name='dependency_type'), nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_verified', sa.DateTime(), nullable=True),
    sa.Column('compatibility_status', sa.Enum('compatible', 'incompatible', 'unknown', name='compatibility_status'), nullable=True),
    sa.Column('wait_for_completion', sa.Boolean(), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=True),
    sa.Column('retry_strategy', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('dependent_version_id != dependency_version_id', name='ck_no_self_dependency'),
    sa.CheckConstraint('timeout > 0', name='ck_timeout_positive'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_dependencies_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_dependencies_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dependency_version_id'], ['pipeline_versions.id'], name=op.f('fk_pipeline_dependencies_dependency_version_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dependent_version_id'], ['pipeline_versions.id'], name=op.f('fk_pipeline_dependencies_dependent_version_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_dependencies_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_dependencies_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_dependencies')),
    sa.UniqueConstraint('dependent_version_id', 'dependency_version_id', name='uq_pipeline_dependency'),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_dependencies_id'))
    )
    op.create_index(op.f('ix_pipeline_dependencies_created_at'), 'pipeline_dependencies', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_dependencies_created_by'), 'pipeline_dependencies', ['created_by'], unique=False)
    op.create_index('ix_pipeline_dependencies_dependency', 'pipeline_dependencies', ['dependency_version_id'], unique=False)
    op.create_index('ix_pipeline_dependencies_dependent', 'pipeline_dependencies', ['dependent_version_id'], unique=False)
    op.create_index(op.f('ix_pipeline_dependencies_tenant_id'), 'pipeline_dependencies', ['tenant_id'], unique=False)
    op.create_table('pipeline_logs',
    sa.Column('pipeline_id', sa.UUID(), nullable=False),
    sa.Column('level', sa.Enum('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', name='log_level'), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('component', sa.String(length=100), nullable=True),
    sa.Column('step_id', sa.UUID(), nullable=True),
    sa.Column('run_id', sa.UUID(), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('trace_id', sa.String(length=100), nullable=True),
    sa.Column('span_id', sa.String(length=100), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_logs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_logs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_logs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_id'], ['pipelines.id'], name=op.f('fk_pipeline_logs_pipeline_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['run_id'], ['pipeline_runs.id'], name=op.f('fk_pipeline_logs_run_id')),
    sa.ForeignKeyConstraint(['step_id'], ['pipeline_steps.id'], name=op.f('fk_pipeline_logs_step_id')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_logs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_logs')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_logs_id'))
    )
    op.create_index(op.f('ix_pipeline_logs_created_at'), 'pipeline_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_logs_created_by'), 'pipeline_logs', ['created_by'], unique=False)
    op.create_index('ix_pipeline_logs_level', 'pipeline_logs', ['level'], unique=False)
    op.create_index('ix_pipeline_logs_pipeline_timestamp', 'pipeline_logs', ['pipeline_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_pipeline_logs_tenant_id'), 'pipeline_logs', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_pipeline_logs_timestamp'), 'pipeline_logs', ['timestamp'], unique=False)
    op.create_index('ix_pipeline_logs_trace', 'pipeline_logs', ['trace_id'], unique=False)
    op.create_table('pipeline_step_runs',
    sa.Column('pipeline_run_id', sa.UUID(), nullable=False),
    sa.Column('step_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'running', 'completed', 'failed', name='step_run_status'), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('error', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('attempt', sa.Integer(), nullable=True),
    sa.Column('node', sa.String(length=255), nullable=True),
    sa.Column('resources_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('attempt > 0', name='ck_attempt_positive'),
    sa.CheckConstraint('duration >= 0', name='ck_step_run_duration_positive'),
    sa.CheckConstraint('end_time IS NULL OR end_time >= start_time', name='ck_step_run_time_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_pipeline_step_runs_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_pipeline_step_runs_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_pipeline_step_runs_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_run_id'], ['pipeline_runs.id'], name=op.f('fk_pipeline_step_runs_pipeline_run_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['step_id'], ['pipeline_steps.id'], name=op.f('fk_pipeline_step_runs_step_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_pipeline_step_runs_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pipeline_step_runs')),
    sa.UniqueConstraint('id', name=op.f('uq_pipeline_step_runs_id'))
    )
    op.create_index(op.f('ix_pipeline_step_runs_created_at'), 'pipeline_step_runs', ['created_at'], unique=False)
    op.create_index(op.f('ix_pipeline_step_runs_created_by'), 'pipeline_step_runs', ['created_by'], unique=False)
    op.create_index('ix_pipeline_step_runs_status', 'pipeline_step_runs', ['status'], unique=False)
    op.create_index(op.f('ix_pipeline_step_runs_tenant_id'), 'pipeline_step_runs', ['tenant_id'], unique=False)
    op.create_table('quality_checks',
    sa.Column('pipeline_run_id', sa.UUID(), nullable=False),
    sa.Column('gate_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('passed', 'failed', 'warning', name='check_status'), nullable=False),
    sa.Column('check_time', sa.DateTime(), nullable=False),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold_value', sa.Float(), nullable=True),
    sa.Column('actual_value', sa.Float(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_quality_checks_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_quality_checks_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['gate_id'], ['quality_gates.id'], name=op.f('fk_quality_checks_gate_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_quality_checks_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pipeline_run_id'], ['pipeline_runs.id'], name=op.f('fk_quality_checks_pipeline_run_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_quality_checks_updated_by'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_quality_checks')),
    sa.UniqueConstraint('id', name=op.f('uq_quality_checks_id'))
    )
    op.create_index(op.f('ix_quality_checks_created_at'), 'quality_checks', ['created_at'], unique=False)
    op.create_index(op.f('ix_quality_checks_created_by'), 'quality_checks', ['created_by'], unique=False)
    op.create_index('ix_quality_checks_gate', 'quality_checks', ['gate_id'], unique=False)
    op.create_index('ix_quality_checks_run', 'quality_checks', ['pipeline_run_id'], unique=False)
    op.create_index('ix_quality_checks_status', 'quality_checks', ['status'], unique=False)
    op.create_index(op.f('ix_quality_checks_tenant_id'), 'quality_checks', ['tenant_id'], unique=False)
    op.create_table('staged_analytics_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('model_type', sa.String(length=100), nullable=False),
    sa.Column('training_duration', sa.Float(), nullable=True),
    sa.Column('iteration_count', sa.Integer(), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('feature_importance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('predictions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('evaluation_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('model_artifacts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_distribution', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('outliers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correlation_matrix', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('precision', sa.Float(), nullable=True),
    sa.Column('recall', sa.Float(), nullable=True),
    sa.Column('f1_score', sa.Float(), nullable=True),
    sa.CheckConstraint('accuracy BETWEEN 0 AND 1 OR accuracy IS NULL', name='ck_accuracy_range'),
    sa.CheckConstraint('iteration_count >= 0 OR iteration_count IS NULL', name='ck_iteration_count_valid'),
    sa.CheckConstraint('training_duration >= 0 OR training_duration IS NULL', name='ck_training_duration_valid'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_analytics_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_analytics_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_analytics_outputs'))
    )
    op.create_index('ix_analytics_outputs_model_type', 'staged_analytics_outputs', ['model_type'], unique=False)
    op.create_table('staged_compliance_reports',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('regulation_type', sa.String(length=100), nullable=False),
    sa.Column('compliance_framework', sa.String(length=100), nullable=True),
    sa.Column('reporting_period', sa.String(length=50), nullable=True),
    sa.Column('jurisdiction', sa.String(length=100), nullable=True),
    sa.Column('compliance_status', sa.String(length=50), nullable=True),
    sa.Column('control_assessments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('risk_assessments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('gap_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('evidence_collected', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('control_documentation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('review_notes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('findings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('violations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('remediation_plans', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('reviewer_id', sa.UUID(), nullable=True),
    sa.Column('review_status', sa.String(length=50), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('approval_chain', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('submission_deadline', sa.DateTime(), nullable=True),
    sa.Column('submission_status', sa.String(length=50), nullable=True),
    sa.Column('regulatory_responses', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('follow_up_actions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('reviewed_at IS NULL OR reviewed_at <= submission_deadline', name='ck_review_deadline_valid'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_compliance_reports_base_id')),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name=op.f('fk_staged_compliance_reports_reviewer_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_compliance_reports_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_compliance_reports'))
    )
    op.create_index('ix_compliance_reports_status', 'staged_compliance_reports', ['compliance_status'], unique=False)
    op.create_index('ix_compliance_reports_type', 'staged_compliance_reports', ['regulation_type'], unique=False)
    op.create_table('staged_decision_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('decision_type', sa.String(length=100), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('constraints', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('priority', sa.String(length=50), nullable=True),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('selected_option', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('evaluation_matrix', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('impact_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('risk_assessment', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('decision_maker', sa.UUID(), nullable=True),
    sa.Column('stakeholders', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('approval_status', sa.String(length=50), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('implementation_plan', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('confidence_score BETWEEN 0 AND 1 OR confidence_score IS NULL', name='ck_decision_confidence_range'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name=op.f('fk_staged_decision_outputs_approved_by')),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_decision_outputs_base_id')),
    sa.ForeignKeyConstraint(['decision_maker'], ['users.id'], name=op.f('fk_staged_decision_outputs_decision_maker')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_decision_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_decision_outputs'))
    )
    op.create_index('ix_decision_outputs_status', 'staged_decision_outputs', ['approval_status'], unique=False)
    op.create_index('ix_decision_outputs_type', 'staged_decision_outputs', ['decision_type'], unique=False)
    op.create_table('staged_insight_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('insight_count', sa.Integer(), nullable=True),
    sa.Column('goal_alignment_score', sa.Float(), nullable=True),
    sa.Column('business_impact_score', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('goals_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metrics_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('patterns_discovered', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correlations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('business_impact_score BETWEEN 0 AND 1 OR business_impact_score IS NULL', name='ck_impact_score_range'),
    sa.CheckConstraint('confidence_score BETWEEN 0 AND 1 OR confidence_score IS NULL', name='ck_confidence_score_range'),
    sa.CheckConstraint('goal_alignment_score BETWEEN 0 AND 1 OR goal_alignment_score IS NULL', name='ck_goal_alignment_range'),
    sa.CheckConstraint('insight_count >= 0 OR insight_count IS NULL', name='ck_insight_count_valid'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_insight_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_insight_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_insight_outputs'))
    )
    op.create_table('staged_metrics_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('dimension', sa.String(length=100), nullable=True),
    sa.Column('time_period', sa.String(length=50), nullable=True),
    sa.Column('key_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('calculated_kpis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('historical_trends', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('forecasted_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('actual_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('variance_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold_breaches', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('trend_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('seasonality_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correlation_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('anomaly_detection', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('chart_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dashboard_layout', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('alert_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_metrics_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_metrics_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_metrics_outputs'))
    )
    op.create_index('ix_metrics_outputs_category', 'staged_metrics_outputs', ['category'], unique=False)
    op.create_index('ix_metrics_outputs_period', 'staged_metrics_outputs', ['time_period'], unique=False)
    op.create_table('staged_monitoring_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('cpu_usage', sa.Float(), nullable=True),
    sa.Column('memory_usage', sa.Float(), nullable=True),
    sa.Column('disk_usage', sa.Float(), nullable=True),
    sa.Column('network_in', sa.Float(), nullable=True),
    sa.Column('network_out', sa.Float(), nullable=True),
    sa.Column('component_status', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('health_checks', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('alert_threshold_breaches', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('service_availability', sa.Float(), nullable=True),
    sa.Column('response_time', sa.Float(), nullable=True),
    sa.Column('throughput', sa.Float(), nullable=True),
    sa.Column('error_rate', sa.Float(), nullable=True),
    sa.Column('concurrent_users', sa.Integer(), nullable=True),
    sa.Column('active_connections', sa.Integer(), nullable=True),
    sa.Column('resource_allocation', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scaling_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('bottleneck_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('optimization_suggestions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('cpu_usage BETWEEN 0 AND 100 OR cpu_usage IS NULL', name='ck_cpu_usage_range'),
    sa.CheckConstraint('disk_usage BETWEEN 0 AND 100 OR disk_usage IS NULL', name='ck_disk_usage_range'),
    sa.CheckConstraint('error_rate BETWEEN 0 AND 1 OR error_rate IS NULL', name='ck_error_rate_range'),
    sa.CheckConstraint('memory_usage BETWEEN 0 AND 100 OR memory_usage IS NULL', name='ck_memory_usage_range'),
    sa.CheckConstraint('service_availability BETWEEN 0 AND 100 OR service_availability IS NULL', name='ck_availability_range'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_monitoring_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_monitoring_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_monitoring_outputs'))
    )
    op.create_table('staged_quality_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('completeness_score', sa.Float(), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('consistency_score', sa.Float(), nullable=True),
    sa.Column('timeliness_score', sa.Float(), nullable=True),
    sa.Column('validity_score', sa.Float(), nullable=True),
    sa.Column('issues_found', sa.Integer(), nullable=True),
    sa.Column('critical_issues_count', sa.Integer(), nullable=True),
    sa.Column('warnings_count', sa.Integer(), nullable=True),
    sa.Column('resolved_issues_count', sa.Integer(), nullable=True),
    sa.Column('validation_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_profile', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pattern_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('anomaly_detection', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correlation_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('improvement_suggestions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('priority_fixes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('estimated_impact', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('accuracy_score BETWEEN 0 AND 1 OR accuracy_score IS NULL', name='ck_accuracy_score_range'),
    sa.CheckConstraint('completeness_score BETWEEN 0 AND 1 OR completeness_score IS NULL', name='ck_completeness_score_range'),
    sa.CheckConstraint('critical_issues_count >= 0 OR critical_issues_count IS NULL', name='ck_critical_issues_valid'),
    sa.CheckConstraint('issues_found >= 0 OR issues_found IS NULL', name='ck_issues_found_valid'),
    sa.CheckConstraint('quality_score BETWEEN 0 AND 1 OR quality_score IS NULL', name='ck_quality_score_range'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_quality_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_quality_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_quality_outputs'))
    )
    op.create_table('staged_recommendation_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('recommendation_type', sa.String(length=100), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_audience', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('priority', sa.String(length=50), nullable=True),
    sa.Column('recommendation_candidates', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('top_recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ranking_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('relevance_scores', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('diversity_score', sa.Float(), nullable=True),
    sa.Column('personalization_score', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('coverage_score', sa.Float(), nullable=True),
    sa.Column('acceptance_rate', sa.Float(), nullable=True),
    sa.Column('click_through_rate', sa.Float(), nullable=True),
    sa.Column('conversion_rate', sa.Float(), nullable=True),
    sa.Column('feedback_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('acceptance_rate BETWEEN 0 AND 1 OR acceptance_rate IS NULL', name='ck_acceptance_rate_range'),
    sa.CheckConstraint('confidence_score BETWEEN 0 AND 1 OR confidence_score IS NULL', name='ck_confidence_score_range'),
    sa.CheckConstraint('diversity_score BETWEEN 0 AND 1 OR diversity_score IS NULL', name='ck_diversity_score_range'),
    sa.CheckConstraint('personalization_score BETWEEN 0 AND 1 OR personalization_score IS NULL', name='ck_personalization_score_range'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_recommendation_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_recommendation_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_recommendation_outputs'))
    )
    op.create_index('ix_recommendation_outputs_type', 'staged_recommendation_outputs', ['recommendation_type'], unique=False)
    op.create_table('staged_report_outputs',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('report_type', sa.String(length=100), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=True),
    sa.Column('report_format', sa.String(length=50), nullable=True),
    sa.Column('template_id', sa.UUID(), nullable=True),
    sa.Column('sections', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('table_of_contents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('executive_summary', sa.Text(), nullable=True),
    sa.Column('main_findings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('appendices', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('visualizations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('charts_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('styling_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('branding_elements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('auto_generation', sa.Boolean(), nullable=True),
    sa.Column('schedule_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('retention_policy', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('access_control', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('distribution_list', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('delivery_status', sa.String(length=50), nullable=True),
    sa.Column('notification_sent', sa.Boolean(), nullable=True),
    sa.Column('access_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint("version ~ '^[0-9]+\\.[0-9]+\\.[0-9]+$'", name='ck_version_format'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staged_report_outputs_base_id')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staged_report_outputs_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staged_report_outputs'))
    )
    op.create_index('ix_report_outputs_delivery', 'staged_report_outputs', ['delivery_status'], unique=False)
    op.create_index('ix_report_outputs_type', 'staged_report_outputs', ['report_type'], unique=False)
    op.create_table('staging_control_points',
    sa.Column('base_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('control_type', sa.String(length=100), nullable=False),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notification_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('control_status', sa.Enum('pending', 'active', 'passed', 'failed', name='control_status'), nullable=True),
    sa.Column('last_check', sa.DateTime(), nullable=True),
    sa.Column('check_count', sa.Integer(), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('decision', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('decision_made_by', sa.UUID(), nullable=True),
    sa.Column('decision_made_at', sa.DateTime(), nullable=True),
    sa.Column('decision_rationale', sa.Text(), nullable=True),
    sa.CheckConstraint('check_count >= 0', name='ck_check_count_non_negative'),
    sa.CheckConstraint('failure_count >= 0', name='ck_failure_count_non_negative'),
    sa.ForeignKeyConstraint(['base_id'], ['staged_outputs.id'], name=op.f('fk_staging_control_points_base_id')),
    sa.ForeignKeyConstraint(['decision_made_by'], ['users.id'], name=op.f('fk_staging_control_points_decision_made_by')),
    sa.ForeignKeyConstraint(['source_id'], ['data_sources.id'], name=op.f('fk_staging_control_points_source_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('base_id', name=op.f('pk_staging_control_points'))
    )
    op.create_index('ix_control_points_status', 'staging_control_points', ['control_status'], unique=False)
    op.create_index('ix_control_points_type', 'staging_control_points', ['control_type'], unique=False)
    op.create_table('staging_processing_history',
    sa.Column('staged_output_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('history_status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'PAUSED', 'CANCELLED', name='processingstatus'), nullable=True),
    sa.Column('history_created_at', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('memory_usage', sa.Float(), nullable=True),
    sa.Column('cpu_usage', sa.Float(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('component', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('trace_id', sa.String(length=100), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('previous_version', sa.UUID(), nullable=True),
    sa.Column('audit_trail', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_at', sa.DateTime(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('last_audit_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('cpu_usage >= 0 OR cpu_usage IS NULL', name='ck_cpu_usage_valid'),
    sa.CheckConstraint('duration >= 0 OR duration IS NULL', name='ck_history_duration_valid'),
    sa.CheckConstraint('memory_usage >= 0 OR memory_usage IS NULL', name='ck_memory_usage_valid'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_staging_processing_history_created_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_staging_processing_history_deleted_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_audit_by'], ['users.id'], name=op.f('fk_staging_processing_history_last_audit_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['staged_output_id'], ['staged_outputs.id'], name=op.f('fk_staging_processing_history_staged_output_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('fk_staging_processing_history_updated_by'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_staging_processing_history_user_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_staging_processing_history')),
    sa.UniqueConstraint('id', name=op.f('uq_staging_processing_history_id'))
    )
    op.create_index('ix_staging_history_output', 'staging_processing_history', ['staged_output_id'], unique=False)
    op.create_index('ix_staging_history_status', 'staging_processing_history', ['history_status'], unique=False)
    op.create_index('ix_staging_history_type', 'staging_processing_history', ['event_type'], unique=False)
    op.create_index(op.f('ix_staging_processing_history_created_at'), 'staging_processing_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_staging_processing_history_created_by'), 'staging_processing_history', ['created_by'], unique=False)
    op.create_index(op.f('ix_staging_processing_history_tenant_id'), 'staging_processing_history', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_staging_processing_history_tenant_id'), table_name='staging_processing_history')
    op.drop_index(op.f('ix_staging_processing_history_created_by'), table_name='staging_processing_history')
    op.drop_index(op.f('ix_staging_processing_history_created_at'), table_name='staging_processing_history')
    op.drop_index('ix_staging_history_type', table_name='staging_processing_history')
    op.drop_index('ix_staging_history_status', table_name='staging_processing_history')
    op.drop_index('ix_staging_history_output', table_name='staging_processing_history')
    op.drop_table('staging_processing_history')
    op.drop_index('ix_control_points_type', table_name='staging_control_points')
    op.drop_index('ix_control_points_status', table_name='staging_control_points')
    op.drop_table('staging_control_points')
    op.drop_index('ix_report_outputs_type', table_name='staged_report_outputs')
    op.drop_index('ix_report_outputs_delivery', table_name='staged_report_outputs')
    op.drop_table('staged_report_outputs')
    op.drop_index('ix_recommendation_outputs_type', table_name='staged_recommendation_outputs')
    op.drop_table('staged_recommendation_outputs')
    op.drop_table('staged_quality_outputs')
    op.drop_table('staged_monitoring_outputs')
    op.drop_index('ix_metrics_outputs_period', table_name='staged_metrics_outputs')
    op.drop_index('ix_metrics_outputs_category', table_name='staged_metrics_outputs')
    op.drop_table('staged_metrics_outputs')
    op.drop_table('staged_insight_outputs')
    op.drop_index('ix_decision_outputs_type', table_name='staged_decision_outputs')
    op.drop_index('ix_decision_outputs_status', table_name='staged_decision_outputs')
    op.drop_table('staged_decision_outputs')
    op.drop_index('ix_compliance_reports_type', table_name='staged_compliance_reports')
    op.drop_index('ix_compliance_reports_status', table_name='staged_compliance_reports')
    op.drop_table('staged_compliance_reports')
    op.drop_index('ix_analytics_outputs_model_type', table_name='staged_analytics_outputs')
    op.drop_table('staged_analytics_outputs')
    op.drop_index(op.f('ix_quality_checks_tenant_id'), table_name='quality_checks')
    op.drop_index('ix_quality_checks_status', table_name='quality_checks')
    op.drop_index('ix_quality_checks_run', table_name='quality_checks')
    op.drop_index('ix_quality_checks_gate', table_name='quality_checks')
    op.drop_index(op.f('ix_quality_checks_created_by'), table_name='quality_checks')
    op.drop_index(op.f('ix_quality_checks_created_at'), table_name='quality_checks')
    op.drop_table('quality_checks')
    op.drop_index(op.f('ix_pipeline_step_runs_tenant_id'), table_name='pipeline_step_runs')
    op.drop_index('ix_pipeline_step_runs_status', table_name='pipeline_step_runs')
    op.drop_index(op.f('ix_pipeline_step_runs_created_by'), table_name='pipeline_step_runs')
    op.drop_index(op.f('ix_pipeline_step_runs_created_at'), table_name='pipeline_step_runs')
    op.drop_table('pipeline_step_runs')
    op.drop_index('ix_pipeline_logs_trace', table_name='pipeline_logs')
    op.drop_index(op.f('ix_pipeline_logs_timestamp'), table_name='pipeline_logs')
    op.drop_index(op.f('ix_pipeline_logs_tenant_id'), table_name='pipeline_logs')
    op.drop_index('ix_pipeline_logs_pipeline_timestamp', table_name='pipeline_logs')
    op.drop_index('ix_pipeline_logs_level', table_name='pipeline_logs')
    op.drop_index(op.f('ix_pipeline_logs_created_by'), table_name='pipeline_logs')
    op.drop_index(op.f('ix_pipeline_logs_created_at'), table_name='pipeline_logs')
    op.drop_table('pipeline_logs')
    op.drop_index(op.f('ix_pipeline_dependencies_tenant_id'), table_name='pipeline_dependencies')
    op.drop_index('ix_pipeline_dependencies_dependent', table_name='pipeline_dependencies')
    op.drop_index('ix_pipeline_dependencies_dependency', table_name='pipeline_dependencies')
    op.drop_index(op.f('ix_pipeline_dependencies_created_by'), table_name='pipeline_dependencies')
    op.drop_index(op.f('ix_pipeline_dependencies_created_at'), table_name='pipeline_dependencies')
    op.drop_table('pipeline_dependencies')
    op.drop_index(op.f('ix_staged_outputs_tenant_id'), table_name='staged_outputs')
    op.drop_index('ix_staged_outputs_status', table_name='staged_outputs')
    op.drop_index('ix_staged_outputs_stage', table_name='staged_outputs')
    op.drop_index('ix_staged_outputs_source_id', table_name='staged_outputs')
    op.drop_index('ix_staged_outputs_pipeline_id', table_name='staged_outputs')
    op.drop_index(op.f('ix_staged_outputs_created_by'), table_name='staged_outputs')
    op.drop_index(op.f('ix_staged_outputs_created_at'), table_name='staged_outputs')
    op.drop_index('ix_staged_outputs_component', table_name='staged_outputs')
    op.drop_table('staged_outputs')
    op.drop_index(op.f('ix_quality_gates_tenant_id'), table_name='quality_gates')
    op.drop_index('ix_quality_gates_pipeline', table_name='quality_gates')
    op.drop_index(op.f('ix_quality_gates_created_by'), table_name='quality_gates')
    op.drop_index(op.f('ix_quality_gates_created_at'), table_name='quality_gates')
    op.drop_table('quality_gates')
    op.drop_index(op.f('ix_pipeline_versions_tenant_id'), table_name='pipeline_versions')
    op.drop_index('ix_pipeline_versions_pipeline', table_name='pipeline_versions')
    op.drop_index(op.f('ix_pipeline_versions_created_at'), table_name='pipeline_versions')
    op.drop_table('pipeline_versions')
    op.drop_index('ix_pipeline_tags_tag', table_name='pipeline_tags')
    op.drop_index('ix_pipeline_tags_pipeline', table_name='pipeline_tags')
    op.drop_table('pipeline_tags')
    op.drop_index(op.f('ix_pipeline_steps_tenant_id'), table_name='pipeline_steps')
    op.drop_index('ix_pipeline_steps_pipeline', table_name='pipeline_steps')
    op.drop_index('ix_pipeline_steps_order', table_name='pipeline_steps')
    op.drop_index(op.f('ix_pipeline_steps_created_by'), table_name='pipeline_steps')
    op.drop_index(op.f('ix_pipeline_steps_created_at'), table_name='pipeline_steps')
    op.drop_table('pipeline_steps')
    op.drop_index(op.f('ix_pipeline_schedules_tenant_id'), table_name='pipeline_schedules')
    op.drop_index('ix_pipeline_schedules_pipeline', table_name='pipeline_schedules')
    op.drop_index('ix_pipeline_schedules_next_execution', table_name='pipeline_schedules')
    op.drop_index(op.f('ix_pipeline_schedules_created_by'), table_name='pipeline_schedules')
    op.drop_index(op.f('ix_pipeline_schedules_created_at'), table_name='pipeline_schedules')
    op.drop_table('pipeline_schedules')
    op.drop_index(op.f('ix_pipeline_runs_tenant_id'), table_name='pipeline_runs')
    op.drop_index('ix_pipeline_runs_status', table_name='pipeline_runs')
    op.drop_index('ix_pipeline_runs_pipeline', table_name='pipeline_runs')
    op.drop_index(op.f('ix_pipeline_runs_created_by'), table_name='pipeline_runs')
    op.drop_index(op.f('ix_pipeline_runs_created_at'), table_name='pipeline_runs')
    op.drop_table('pipeline_runs')
    op.drop_index(op.f('ix_user_activity_logs_user_id'), table_name='user_activity_logs')
    op.drop_index('ix_user_activity_logs_type', table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_tenant_id'), table_name='user_activity_logs')
    op.drop_index('ix_user_activity_logs_success', table_name='user_activity_logs')
    op.drop_index('ix_user_activity_logs_entity', table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_created_by'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_created_at'), table_name='user_activity_logs')
    op.drop_table('user_activity_logs')
    op.drop_index('ix_team_resources_type', table_name='team_resources')
    op.drop_index(op.f('ix_team_resources_tenant_id'), table_name='team_resources')
    op.drop_index('ix_team_resources_team', table_name='team_resources')
    op.drop_index('ix_team_resources_status', table_name='team_resources')
    op.drop_index(op.f('ix_team_resources_created_by'), table_name='team_resources')
    op.drop_index(op.f('ix_team_resources_created_at'), table_name='team_resources')
    op.drop_table('team_resources')
    op.drop_index(op.f('ix_team_members_user_id'), table_name='team_members')
    op.drop_index(op.f('ix_team_members_tenant_id'), table_name='team_members')
    op.drop_index(op.f('ix_team_members_team_id'), table_name='team_members')
    op.drop_index('ix_team_members_status', table_name='team_members')
    op.drop_index('ix_team_members_role', table_name='team_members')
    op.drop_index(op.f('ix_team_members_created_by'), table_name='team_members')
    op.drop_index(op.f('ix_team_members_created_at'), table_name='team_members')
    op.drop_table('team_members')
    op.drop_index(op.f('ix_team_invitations_tenant_id'), table_name='team_invitations')
    op.drop_index('ix_team_invitations_status', table_name='team_invitations')
    op.drop_index('ix_team_invitations_email', table_name='team_invitations')
    op.drop_index(op.f('ix_team_invitations_created_by'), table_name='team_invitations')
    op.drop_index(op.f('ix_team_invitations_created_at'), table_name='team_invitations')
    op.drop_table('team_invitations')
    op.drop_index(op.f('ix_stream_source_configs_tenant_id'), table_name='stream_source_configs')
    op.drop_index(op.f('ix_stream_source_configs_created_by'), table_name='stream_source_configs')
    op.drop_index(op.f('ix_stream_source_configs_created_at'), table_name='stream_source_configs')
    op.drop_table('stream_source_configs')
    op.drop_index(op.f('ix_source_sync_history_tenant_id'), table_name='source_sync_history')
    op.drop_index('ix_source_sync_history_source_time', table_name='source_sync_history')
    op.drop_index(op.f('ix_source_sync_history_created_by'), table_name='source_sync_history')
    op.drop_index(op.f('ix_source_sync_history_created_at'), table_name='source_sync_history')
    op.drop_table('source_sync_history')
    op.drop_index(op.f('ix_source_connections_tenant_id'), table_name='source_connections')
    op.drop_index('ix_source_connections_status', table_name='source_connections')
    op.drop_index(op.f('ix_source_connections_created_by'), table_name='source_connections')
    op.drop_index(op.f('ix_source_connections_created_at'), table_name='source_connections')
    op.drop_table('source_connections')
    op.drop_index(op.f('ix_s3_source_configs_tenant_id'), table_name='s3_source_configs')
    op.drop_index(op.f('ix_s3_source_configs_created_by'), table_name='s3_source_configs')
    op.drop_index(op.f('ix_s3_source_configs_created_at'), table_name='s3_source_configs')
    op.drop_table('s3_source_configs')
    op.drop_index('ix_refresh_tokens_user', table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_tenant_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_created_by'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_created_at'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_pipelines_tenant_id'), table_name='pipelines')
    op.drop_index('ix_pipelines_status', table_name='pipelines')
    op.drop_index('ix_pipelines_owner', table_name='pipelines')
    op.drop_index('ix_pipelines_mode', table_name='pipelines')
    op.drop_index(op.f('ix_pipelines_created_by'), table_name='pipelines')
    op.drop_index(op.f('ix_pipelines_created_at'), table_name='pipelines')
    op.drop_table('pipelines')
    op.drop_index(op.f('ix_pipeline_templates_tenant_id'), table_name='pipeline_templates')
    op.drop_index('ix_pipeline_templates_name', table_name='pipeline_templates')
    op.drop_index(op.f('ix_pipeline_templates_created_at'), table_name='pipeline_templates')
    op.drop_table('pipeline_templates')
    op.drop_index(op.f('ix_file_source_info_tenant_id'), table_name='file_source_info')
    op.drop_index(op.f('ix_file_source_info_created_by'), table_name='file_source_info')
    op.drop_index(op.f('ix_file_source_info_created_at'), table_name='file_source_info')
    op.drop_table('file_source_info')
    op.drop_index(op.f('ix_database_source_configs_tenant_id'), table_name='database_source_configs')
    op.drop_index(op.f('ix_database_source_configs_created_by'), table_name='database_source_configs')
    op.drop_index(op.f('ix_database_source_configs_created_at'), table_name='database_source_configs')
    op.drop_table('database_source_configs')
    op.drop_index(op.f('ix_api_source_configs_tenant_id'), table_name='api_source_configs')
    op.drop_index(op.f('ix_api_source_configs_created_by'), table_name='api_source_configs')
    op.drop_index(op.f('ix_api_source_configs_created_at'), table_name='api_source_configs')
    op.drop_table('api_source_configs')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_token', table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_tenant_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_expires', table_name='user_sessions')
    op.drop_index('ix_user_sessions_device', table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_created_by'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_created_at'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_teams_tenant_id'), table_name='teams')
    op.drop_index('ix_teams_status', table_name='teams')
    op.drop_index('ix_teams_owner', table_name='teams')
    op.drop_index('ix_teams_name', table_name='teams')
    op.drop_index(op.f('ix_teams_created_by'), table_name='teams')
    op.drop_index(op.f('ix_teams_created_at'), table_name='teams')
    op.drop_table('teams')
    op.drop_index(op.f('ix_tags_tenant_id'), table_name='tags')
    op.drop_index('ix_tags_name', table_name='tags')
    op.drop_index(op.f('ix_tags_created_by'), table_name='tags')
    op.drop_index(op.f('ix_tags_created_at'), table_name='tags')
    op.drop_index('ix_tags_category', table_name='tags')
    op.drop_table('tags')
    op.drop_index('ix_session_devices_user_device', table_name='session_devices')
    op.drop_index(op.f('ix_session_devices_tenant_id'), table_name='session_devices')
    op.drop_index(op.f('ix_session_devices_created_by'), table_name='session_devices')
    op.drop_index(op.f('ix_session_devices_created_at'), table_name='session_devices')
    op.drop_table('session_devices')
    op.drop_index(op.f('ix_service_accounts_user_id'), table_name='service_accounts')
    op.drop_index(op.f('ix_service_accounts_tenant_id'), table_name='service_accounts')
    op.drop_index('ix_service_accounts_status', table_name='service_accounts')
    op.drop_index('ix_service_accounts_name', table_name='service_accounts')
    op.drop_index(op.f('ix_service_accounts_created_by'), table_name='service_accounts')
    op.drop_index(op.f('ix_service_accounts_created_at'), table_name='service_accounts')
    op.drop_table('service_accounts')
    op.drop_index(op.f('ix_password_reset_tokens_user_id'), table_name='password_reset_tokens')
    op.drop_index('ix_password_reset_tokens_user', table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_tenant_id'), table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_created_by'), table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_created_at'), table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_index('ix_data_sources_type_status', table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_tenant_id'), table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_owner_id'), table_name='data_sources')
    op.drop_index('ix_data_sources_name_owner', table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_created_by'), table_name='data_sources')
    op.drop_index(op.f('ix_data_sources_created_at'), table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('ix_users_role', table_name='users')
    op.drop_index('ix_users_email_status', table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('ix_users_active', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###